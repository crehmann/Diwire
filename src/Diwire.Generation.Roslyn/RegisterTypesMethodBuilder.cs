using Diwire.Abstraction;
using Diwire.Generation.Roslyn.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Linq;
using System.Text;

namespace Diwire.Generation.Roslyn
{
    public static class RegisterTypesMethodBuilder
    {
        private const string ContainerRegistryParameterName = "containerRegistry";
        private static readonly MethodDeclarationSyntax methodDeclaration = SyntaxFactory
                .MethodDeclaration(SyntaxFactory.ParseTypeName("void"), nameof(IModule.RegisterTypes))
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword), SyntaxFactory.Token(SyntaxKind.OverrideKeyword))
                .AddParameterListParameters(SyntaxFactory.Parameter(
                    attributeLists: SyntaxFactory.List<AttributeListSyntax>(),
                    modifiers: SyntaxFactory.TokenList(),
                    type: SyntaxFactory.ParseTypeName(typeof(IContainerRegistry).FullName),
                    identifier: SyntaxFactory.Identifier(ContainerRegistryParameterName),
                    @default: null))
                .AddBodyStatements(SyntaxFactory.EmptyStatement().WithLeadingTrivia(SyntaxFactory.Comment("// This Code was generated by Dewire")));

        public static MethodDeclarationSyntax Build(ModuleInfo module)
        {
            var registrationStatments = module.Registrations.Select(x => CreateStatement(x)).ToArray();
            return methodDeclaration.AddBodyStatements(registrationStatments);
        }

        private static StatementSyntax CreateStatement(RegistrationInfo registration)
        {
            var statement = new StringBuilder()
                .Append(ContainerRegistryParameterName)
                .Append(".")
                .Append(nameof(IContainerRegistry.RegisterSingelton))
                .Append($"<{registration.FromType.GetFullName()}>")
                .Append($"(_ => new {registration.Constructor.ContainingSymbol.GetFullName()}({CreateConstructorParameters(registration.Constructor)}));")
                .ToString();
            return SyntaxFactory
                .ParseStatement(statement)
                .WithTrailingTrivia(SyntaxFactory.CarriageReturnLineFeed);
        }

        private static string CreateConstructorParameters(IMethodSymbol methodSymbol)
        {
            if (methodSymbol.Parameters.Length == 0)
            {
                return string.Empty;
            }
            else
            {
                //TODO
                return "";
            }
        }
    }
}
